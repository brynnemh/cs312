using Priority_Queue;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace TSP
{
    class State : PriorityQueueNode 
	{
		# region static members
		private static ArrayList cities;
		#endregion

		# region private members
		private ArrayList tour;
		private double[,] costMatrix;
		private double cost;
		private double bound;
		#endregion 

		#region Constructors

		public State() { }

		/// <summary> creates the start state from a list of cities </summary>
		/// <param name="iRoute"> the list of cities generated by the solver </param>
		public State(ArrayList iRoute)
		{
			cities = iRoute;

			tour = new ArrayList();
			cost = 0;
			bound = 0;

			costMatrix = new double[iRoute.Count, iRoute.Count];
			for (int i = 0; i < iRoute.Count; ++i)
			{
				City current = iRoute[i] as City;
				for (int j = i; j < iRoute.Count; ++j)
				{
					double currCost = current.costToGetTo(iRoute[j] as City);
					if (i == j) // on the diagonal
						currCost = double.MaxValue;
					costMatrix[i, j] = currCost;
					costMatrix[j, i] = costMatrix[i, j];
				}
			}
			reduceMatrix();
		}

        /// <summary> creates a deep copy of a state </summary>
        /// <param name="s"> the state to copy (the parent state) </param>
        public State(State s)
        {
            this.tour = new ArrayList(s.tour);
            this.cost = s.cost;
            this.bound = s.bound;

            costMatrix = (double[,])s.costMatrix.Clone();
        }
		#endregion

        public List<State> successors()
        {
            int lastCity = (int)tour[tour.Count - 1];
            return null;
        }

		# region private methods
		/// <summary> 
		///  reduces the costMatrix
		///  subtracts the minimum from each row and column and adds it to the bound
		/// </summary>
		private void reduceMatrix() 
		{
			// reduce each row
			for (int i = 0; i < cities.Count; ++i)
			{
				double min = double.PositiveInfinity;
				for (int j = 0; j < cities.Count; ++j)
				{
					if (costMatrix[i, j] < min)
						min = costMatrix[i, j];
				}
				if (min != 0 && min != double.PositiveInfinity)
				{
					for (int j = 0; j < cities.Count; ++j)
					{
						if (costMatrix[i,j] != double.PositiveInfinity) // don't reduce the infinities
							costMatrix[i, j] -= min;
					}
				}
				bound += min;
			}
			// reduce each column
			for (int j = 0; j < cities.Count; ++j)
			{
				double min = double.PositiveInfinity;
				for (int i = 0; i < cities.Count; ++i)
				{
					if (costMatrix[i, j] < min)
						min = costMatrix[i, j];
				}
				if (min != 0 && min != double.PositiveInfinity)
				{
					for (int i = 0; i < cities.Count; ++i)
					{
						if (costMatrix[i, j] != double.PositiveInfinity) // don't reduce the infinities
							costMatrix[i, j] -= min;
					}
				}
				bound += min;
			}
            // remove impossible edges
            int lastCity = (int)tour[tour.Count - 1];
            for (int j = 0; j < tour.Count - 1; ++j)
            {
                costMatrix[lastCity, j] = double.PositiveInfinity;
            }
		}
		#endregion
	}
}
